# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run

#
# To configure this workflow:

#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Configure two environments "dev" and "prod" each with values for PROJECT_ID, GAR_LOCATION, SERVICE and REGION environment variables
#    Select the "Required reviewers" option for "prod" environment and Specify people or teams that may approve workflow runs when they access this environment.
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches: [main]

  release:
    types: [published]


jobs:
  build-push:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      tag1: ${{ steps.tag.outputs.tag }}
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}''

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
        
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ vars.GAR_LOCATION }}-docker.pkg.dev'
          
      - name: Get Tag
        id: tag
        run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Build and Push Container
        run: |-
          docker build -t "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}/${{ vars.SERVICE }}:${{ steps.tag.outputs.tag }}" ./
          docker push "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}/${{ vars.SERVICE }}:${{ steps.tag.outputs.tag }}"

      # END - Docker auth and build
  deploy-to-staging:
      needs: build-push
      permissions:
        id-token: 'write'
        issues: 'write'
      environment: dev
      runs-on: ubuntu-latest

      steps:

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com


      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ vars.SERVICE }}
          region: ${{ vars.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}/${{ vars.SERVICE }}:${{ needs.build-push.outputs.tag1 }}

  test-staging:
      needs: deploy-to-staging
      permissions:
        id-token: 'write'
        issues: 'write'
      environment: dev
      runs-on: ubuntu-latest

      steps:  
        - name: Test staging  
          uses: cygnetdigital/wait_for_response@v2.0.0
          with:
            url: 'https://actions-demo-lkxshjwprq-uc.a.run.app/'
            responseCode: '200,500'
            timeout: 2000
            interval: 500
        # If required, use the Cloud Run url output in later steps
        #- name: Show Output
         #run: echo ${{ steps.deploy.outputs.url }}
          
        - name: Google Auth
          id: auth
          uses: 'google-github-actions/auth@v0'
          with:
            token_format: 'access_token'
            workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
            service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
            
        - name: 'Set up Cloud SDK'
          uses: 'google-github-actions/setup-gcloud@v1'
          with:
            version: '>= 363.0.0'

        - name: 'Use gcloud CLI'
          id: get-tag
          run: echo "tag=$(gcloud run services describe hello --region=us-central1 | grep Image)" >> $GITHUB_OUTPUT
          
        - name: Failure Condition
          #if: steps.get-tag.output != needs.build-push.outputs.tag1
          run: |-
            echo ${{steps.get-tag.output}}
            echo ${{needs.build-push.outputs.tag1}}
            echo "error"
            exit 1
          
  deploy-to-production:
        needs: test-staging
        permissions:
          id-token: 'write'
        environment: prod
        runs-on: ubuntu-latest

        steps:

          - name: Google Auth
            id: auth
            uses: 'google-github-actions/auth@v0'
            with:
              token_format: 'access_token'
              workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
              service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com


          - name: Deploy to Cloud Run
            id: deploy
            uses: google-github-actions/deploy-cloudrun@v0
            with:
              service: ${{ vars.SERVICE }}
              region: ${{ vars.REGION }}
              # NOTE: If using a pre-built image, update the image name here
              image: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.SERVICE }}/${{ vars.SERVICE }}:${{ needs.build-push.outputs.tag1 }}
